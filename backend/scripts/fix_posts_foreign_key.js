const { executeQuery } = require('../src/config/database');

async function fixPostsForeignKey() {
  try {
    console.log('ƒêang s·ª≠a foreign key constraint cho b·∫£ng posts...');
    
    // Ki·ªÉm tra constraints hi·ªán t·∫°i
    const constraints = await executeQuery(`
      SELECT CONSTRAINT_NAME, REFERENCED_TABLE_NAME, REFERENCED_COLUMN_NAME
      FROM information_schema.KEY_COLUMN_USAGE 
      WHERE TABLE_NAME = 'posts' 
      AND TABLE_SCHEMA = 'yt_capital_db'
      AND COLUMN_NAME = 'category_id'
    `);
    
    console.log('Constraints hi·ªán t·∫°i:', constraints);
    
    // X√≥a t·∫•t c·∫£ foreign key constraints li√™n quan ƒë·∫øn category_id
    for (const constraint of constraints) {
      if (constraint.CONSTRAINT_NAME) {
        try {
          await executeQuery(`ALTER TABLE posts DROP FOREIGN KEY ${constraint.CONSTRAINT_NAME}`);
          console.log(`‚úÖ ƒê√£ x√≥a constraint: ${constraint.CONSTRAINT_NAME}`);
        } catch (err) {
          console.log(`‚ö†Ô∏è  Kh√¥ng th·ªÉ x√≥a constraint ${constraint.CONSTRAINT_NAME}:`, err.message);
        }
      }
    }
    
    // Th√™m foreign key constraint m·ªõi ƒë√∫ng
    try {
      await executeQuery(`
        ALTER TABLE posts
        ADD CONSTRAINT fk_posts_category_id
            FOREIGN KEY (category_id)
            REFERENCES post_categories(id)
            ON DELETE SET NULL
            ON UPDATE CASCADE
      `);
      console.log('‚úÖ ƒê√£ th√™m foreign key constraint m·ªõi');
    } catch (err) {
      if (err.code === 'ER_FK_DUP_NAME') {
        console.log('‚úÖ Foreign key constraint ƒë√£ t·ªìn t·∫°i v√† ƒë√∫ng');
      } else {
        throw err;
      }
    }
    
    // Ki·ªÉm tra k·∫øt qu·∫£
    const result = await executeQuery('SHOW CREATE TABLE posts');
    console.log('‚úÖ C·∫•u tr√∫c b·∫£ng posts sau khi s·ª≠a:');
    console.log(result[0]['Create Table']);
    
    console.log('üéâ Ho√†n th√†nh! Foreign key constraint ƒë√£ ƒë∆∞·ª£c s·ª≠a.');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi s·ª≠a foreign key constraint:', error);
    process.exit(1);
  }
}

fixPostsForeignKey();
