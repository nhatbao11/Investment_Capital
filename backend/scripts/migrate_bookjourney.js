const mysql = require('mysql2/promise');
require('dotenv').config();

const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 3306,
  user: process.env.DB_USER || 'investment_user',
  password: process.env.DB_PASSWORD || 'your_secure_password_here',
  database: process.env.DB_NAME || 'investment_capital',
  multipleStatements: true
};

async function migrateBookJourney() {
  let connection;
  
  try {
    console.log('üîó Connecting to database...');
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Connected to database');

    // Create bookjourney table
    console.log('üìö Creating bookjourney table...');
    const createTableSQL = `
      CREATE TABLE IF NOT EXISTS bookjourney (
        id INT PRIMARY KEY AUTO_INCREMENT,
        title VARCHAR(500) NOT NULL,
        description TEXT,
        image_url VARCHAR(500),
        pdf_url VARCHAR(500) NOT NULL,
        author_id INT NOT NULL,
        status ENUM('draft', 'published', 'archived') DEFAULT 'draft',
        view_count INT DEFAULT 0,
        download_count INT DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE CASCADE,
        INDEX idx_status (status),
        INDEX idx_author (author_id),
        INDEX idx_created_at (created_at),
        INDEX idx_view_count (view_count)
      );
    `;
    
    await connection.execute(createTableSQL);
    console.log('‚úÖ BookJourney table created successfully');

    // Insert sample data
    console.log('üìñ Inserting sample bookjourney data...');
    
    // Get admin user ID
    const [adminUsers] = await connection.execute(
      'SELECT id FROM users WHERE role = "admin" LIMIT 1'
    );
    
    if (adminUsers.length === 0) {
      console.log('‚ùå No admin user found. Please create an admin user first.');
      return;
    }
    
    const adminId = adminUsers[0].id;
    
    const sampleBooks = [
      {
        title: 'L√Ω Thuy·∫øt Dow - N·ªÅn T·∫£ng Ph√¢n T√≠ch K·ªπ Thu·∫≠t',
        description: 'Cu·ªën s√°ch kinh ƒëi·ªÉn v·ªÅ l√Ω thuy·∫øt Dow, n·ªÅn t·∫£ng c·ªßa ph√¢n t√≠ch k·ªπ thu·∫≠t hi·ªán ƒë·∫°i. T√¨m hi·ªÉu v·ªÅ c√°c nguy√™n l√Ω c∆° b·∫£n c·ªßa xu h∆∞·ªõng th·ªã tr∆∞·ªùng.',
        image_url: 'https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=400&h=600&fit=crop',
        pdf_url: '/uploads/reports/dow_theory_guide.pdf',
        author_id: adminId,
        status: 'published'
      },
      {
        title: 'S√≥ng Elliott - Ph√¢n T√≠ch Chu K·ª≥ Th·ªã Tr∆∞·ªùng',
        description: 'Kh√°m ph√° l√Ω thuy·∫øt s√≥ng Elliott v√† c√°ch √°p d·ª•ng trong ph√¢n t√≠ch chu k·ª≥ th·ªã tr∆∞·ªùng. H·ªçc c√°ch nh·∫≠n di·ªán c√°c m·∫´u s√≥ng v√† d·ª± ƒëo√°n xu h∆∞·ªõng.',
        image_url: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=600&fit=crop',
        pdf_url: '/uploads/reports/elliott_wave_analysis.pdf',
        author_id: adminId,
        status: 'published'
      },
      {
        title: 'Fibonacci - T·ª∑ L·ªá V√†ng Trong ƒê·∫ßu T∆∞',
        description: 'T√¨m hi·ªÉu v·ªÅ t·ª∑ l·ªá Fibonacci v√† ·ª©ng d·ª•ng trong ph√¢n t√≠ch k·ªπ thu·∫≠t. C√°ch s·ª≠ d·ª•ng c√°c m·ª©c h·ªìi l·∫°i v√† m·ªü r·ªông ƒë·ªÉ t√¨m ƒëi·ªÉm v√†o/l·ªánh.',
        image_url: 'https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=400&h=600&fit=crop',
        pdf_url: '/uploads/reports/fibonacci_trading.pdf',
        author_id: adminId,
        status: 'published'
      },
      {
        title: 'T√¢m L√Ω Th·ªã Tr∆∞·ªùng - ƒê·ªçc V·ªã ƒê√°m ƒê√¥ng',
        description: 'Ph√¢n t√≠ch t√¢m l√Ω th·ªã tr∆∞·ªùng v√† h√†nh vi c·ªßa ƒë√°m ƒë√¥ng. H·ªçc c√°ch nh·∫≠n di·ªán c√°c d·∫•u hi·ªáu t√¢m l√Ω ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞ ƒë√∫ng ƒë·∫Øn.',
        image_url: 'https://images.unsplash.com/photo-1559526324-4b87b5e36e44?w=400&h=600&fit=crop',
        pdf_url: '/uploads/reports/market_psychology.pdf',
        author_id: adminId,
        status: 'published'
      },
      {
        title: 'Qu·∫£n L√Ω R·ªßi Ro - B·∫£o V·ªá V·ªën ƒê·∫ßu T∆∞',
        description: 'C√°c chi·∫øn l∆∞·ª£c qu·∫£n l√Ω r·ªßi ro hi·ªáu qu·∫£ trong ƒë·∫ßu t∆∞. H·ªçc c√°ch b·∫£o v·ªá v·ªën v√† t·ªëi ∆∞u h√≥a t·ª∑ l·ªá r·ªßi ro/l·ª£i nhu·∫≠n.',
        image_url: 'https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=400&h=600&fit=crop',
        pdf_url: '/uploads/reports/risk_management.pdf',
        author_id: adminId,
        status: 'published'
      },
      {
        title: 'Ph√¢n T√≠ch C∆° B·∫£n - ƒê√°nh Gi√° Gi√° Tr·ªã Doanh Nghi·ªáp',
        description: 'H∆∞·ªõng d·∫´n ph√¢n t√≠ch c∆° b·∫£n v√† ƒë√°nh gi√° gi√° tr·ªã n·ªôi t·∫°i c·ªßa doanh nghi·ªáp. C√°c ch·ªâ s·ªë t√†i ch√≠nh quan tr·ªçng v√† c√°ch s·ª≠ d·ª•ng.',
        image_url: 'https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=400&h=600&fit=crop',
        pdf_url: '/uploads/reports/fundamental_analysis.pdf',
        author_id: adminId,
        status: 'published'
      }
    ];

    for (const book of sampleBooks) {
      await connection.execute(
        `INSERT INTO bookjourney (title, description, image_url, pdf_url, author_id, status, view_count, download_count) 
         VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          book.title,
          book.description,
          book.image_url,
          book.pdf_url,
          book.author_id,
          book.status,
          Math.floor(Math.random() * 1000) + 100, // Random view count
          Math.floor(Math.random() * 200) + 50    // Random download count
        ]
      );
    }
    
    console.log('‚úÖ Sample bookjourney data inserted successfully');
    
    // Show summary
    const [countResult] = await connection.execute('SELECT COUNT(*) as total FROM bookjourney');
    console.log(`üìä Total bookjourney records: ${countResult[0].total}`);
    
    console.log('üéâ BookJourney migration completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå Database connection closed');
    }
  }
}

// Run migration
if (require.main === module) {
  migrateBookJourney()
    .then(() => {
      console.log('‚úÖ Migration completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Migration failed:', error);
      process.exit(1);
    });
}

module.exports = { migrateBookJourney };

